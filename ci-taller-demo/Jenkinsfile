pipeline {
    agent any
    tools {
        maven 'maven'
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/ingenierIa-y-calidad-de-software-taller/Taller-Demo-CICD.git', branch: 'main'
            }
        }

        stage('Build') {
            steps {
                dir('ci-taller-demo') {
                    sh 'mvn clean package'
                 }
            }
        }


         stage('Confirmar despliegue') {
            steps {
                script {
                    def userInput = input(
                                id: 'DespliegueConfirmacion', message: '¬øDeseas desplegar a producci√≥n?', parameters: [
                                    choice(choices: ['S√≠', 'No'], description: 'Selecciona una opci√≥n', name: 'Desplegar')
                                ]
                            )

                            if (userInput == 'No') {
                        error("El despliegue ha sido cancelado por el usuario.")
                            }
                        }
                    }
                }

       stage('Deploy') {
            steps {
                dir('ci-taller-demo') {
                    // Detenemos contenedor si ya existe
                        sh '''
                            docker stop demo-app || true
                            docker rm demo-app || true
                            docker rmi demo-app || true
                        '''
                        // Build de imagen
                        sh 'docker build -t demo-app .'
                        // Run del contenedor
                        sh 'docker run -d --name demo-app -p 8082:8080 demo-app'
                    }
                }
            }
        }



     post {

        always {
            script {
                def result = readFile('ci-taller-demo/target/surefire-reports/com.example.demo.DemoApplicationTests.txt').trim()
                env.TEST_RESULT_MESSAGE = result
                }
        }


        success {
                withCredentials([
                string(credentialsId: 'TELEGRAM_BOT_TOKEN', variable: 'BOT_TOKEN'),
                string(credentialsId: 'TELEGRAM_CHAT_ID', variable: 'CHAT_ID')
            ]) {
                    sh """
                    curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \\
                    -d chat_id=${CHAT_ID} \\
                    -d text="‚úÖ √âxito: Pipeline completado correctamente en Jenkins. \n üìä ${TEST_RESULT_MESSAGE}"
                """
            }
        }

        failure {
                withCredentials([
                string(credentialsId: 'TELEGRAM_BOT_TOKEN', variable: 'BOT_TOKEN'),
                string(credentialsId: 'TELEGRAM_CHAT_ID', variable: 'CHAT_ID')
            ]) {
                    sh """
                    curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \\
                    -d chat_id=${CHAT_ID} \\
                    -d text="‚ùå Error: Fall√≥ el pipeline en Jenkins. Revisar logs. \n üìä ${TEST_RESULT_MESSAGE}"
                """
            }
        }
    }

}
