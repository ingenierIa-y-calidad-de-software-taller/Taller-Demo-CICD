pipeline {
    agent any
    tools {
        maven 'maven'
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/ingenierIa-y-calidad-de-software-taller/Taller-Demo-CICD.git', branch: 'main'
            }
        }

        stage('Build') {
            steps {
                dir('ci-taller-demo') {
                    sh 'mvn clean package'
                 }
            }
        }


         stage('Confirmar despliegue') {
            steps {
                script {
                    def userInput = input(
                        id: 'DespliegueConfirmacion',
                        message: '¬øDeseas desplegar a producci√≥n?',
                        parameters: [
                            choice(choices: ['S√≠', 'No'], description: 'Selecciona una opci√≥n', name: 'Desplegar')
                        ]
                    )
                    env.DEPLOY = (userInput == 'S√≠') ? 'true' : 'false'
                    }
            }
         }

       stage('Deploy') {
            when {
                expression { env.DEPLOY == 'true' }
            }
                steps {
                dir('ci-taller-demo') {
                    sh '''
                            docker stop demo-app || true
                            docker rm demo-app || true
                            docker rmi demo-app || true
                        '''
                        sh 'docker build -t demo-app .'
                        sh 'docker run -d --name demo-app -p 8082:8080 demo-app'
                    }
                }
            }
        }


    post {
        always {
            script {
                sh '''
                grep "Tests run:" ci-taller-demo/target/surefire-reports/*.txt > test_result_summary.txt || echo "No se encontraron resultados." > test_result_summary.txt
            '''
            }
        }

        success {
            withCredentials([
                string(credentialsId: 'TELEGRAM_BOT_TOKEN', variable: 'BOT_TOKEN'),
                string(credentialsId: 'TELEGRAM_CHAT_ID', variable: 'CHAT_ID')
            ]) {
                script {
                    def testSummary = readFile('test_result_summary.txt').trim()
                    sh """
                        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \\
                        -d chat_id=${CHAT_ID} \\
                        -d text="‚úÖ  √âxito: Pipeline completado correctamente en Jenkins.\n üìä ${testSummary}"
                    """
                }
            }
        }

        failure {
            withCredentials([
                string(credentialsId: 'TELEGRAM_BOT_TOKEN', variable: 'BOT_TOKEN'),
                string(credentialsId: 'TELEGRAM_CHAT_ID', variable: 'CHAT_ID')
            ]) {
                script {
                    def testSummary = fileExists('test_result_summary.txt') ? readFile('test_result_summary.txt').trim() : "Sin resultados."
                    sh """
                        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \\
                        -d chat_id=${CHAT_ID} \\
                        -d text="‚ùå  Error: Fall√≥ el pipeline en Jenkins.\n üìä ${testSummary}"
                    """
                }
            }
        }

        aborted {
                withCredentials([
                string(credentialsId: 'TELEGRAM_BOT_TOKEN', variable: 'BOT_TOKEN'),
                string(credentialsId: 'TELEGRAM_CHAT_ID', variable: 'CHAT_ID')
            ]) {
                    script {
                        def testSummary = fileExists('test_result_summary.txt') ? readFile('test_result_summary.txt').trim() : "Sin resultados."
                    sh """
                        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \\
                        -d chat_id=${CHAT_ID} \\
                        -d text="‚ö†Ô∏è  Pipeline abortado por el usuario.\n üìä ${testSummary}"
                    """
                }
            }
        }
    }

}
